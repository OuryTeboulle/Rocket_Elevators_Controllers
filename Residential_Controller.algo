


variables:

userCallFloor
userRequestedFloor
elevatorCurrentFloor
elevatorRelativePosition = elevatorCurrentFloor  - userCallFloor 
distance between elevatorCurrentFloor and userCallFloor = |userCallFloor  - elevatorCurrentFloor | // 'absolute value, can be only >= 0 '
elevatorCurrentStatus = idle || moveUp || moveDown
elevatorLoadWeight



SEQUENCE manageRequests  // 'manage request according to elevatorCurrentStatus'
    IF the elevatorCurrentStatus of the requested elevator = idle THEN
    DO the requested SEQUENCE
    IF the elevatorCurrentStatus of the requested elevator = moveUp OR moveDown THEN
    ADD the requested SEQUENCE on a list 

ENDSEQUENCE sendRequest // 'sending request to an elevator'




SEQUENCE callUp  // 'when pressing call up button'
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall
    IF choosen elevatorRelativePosition value < 0 THEN
        CALL SEQUENCE moveUp
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition value = 0 THEN
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition value > 0 THEN
        CALL SEQUENCE moveDown
        CALL SEQUENCE openCloseDoors
    END IF
ENDSEQUENCE



SEQUENCE callDown // 'when pressing call down button'
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccording to elevatorRelativePosition and elevator current position for request down
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall
    IF choosen elevatorRelativePosition value < 0 THEN
        CALL SEQUENCE moveUp
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition value = 0 THEN
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition value > 0 THEN
        CALL SEQUENCE moveDown
        CALL SEQUENCE openCloseDoors
    END IF
ENDSEQUENCE


SEQUENCE pushFloorRequestButton // 'when pressing floor request button in elevator cage'
    READ the time 
    READ the floor requested 
    CALL SEQUENCE closeDoors when pressing floor request button
    IF floor requested  > elevatorCurrentFloor THEN
    CALL SEQUENCE moveUpToRequestedFloor
    CALL SEQUENCE openCloseDoors
    IF floor requested  < elevatorCurrentFloor THEN
    CALL SEQUENCE moveDownToRequestedFloor
    CALL SEQUENCE openCloseDoors
    IF floor requested  = elevatorCurrentFloor THEN
    DO NOTHING
ENDSEQUENCE


SEQUENCE getData
    READ userCallFloor 
    READ ALL elevatorCurrentFloor 
    READ ALL elevatorCurrentStatus
    READ ALL elevatorLoadWeight 
    READ ALL elevators |UsersCallFloor - ElevatorCurrentFloor| 
    CALCULATE elevatorRelativePosition FOR ALL elevators
    READ elevatorRelativePosition FOR ALL elevators
    CALCULATE distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
    READ distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
ENDSEQUENCE



SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    SORT elevators values of distance between elevatorCurrentFloor and userCallFloor by decreasing value
    SET score with integer number from 1 to the elevators according to the sorting
ENDSEQUENCE



SEQUENCE setScoreAccording to elevatorRelativePosition and elevatorCurrentStatus for request up
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 2
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 0
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 1
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
ENDSEQUENCE


SEQUENCE setScoreAccording to elevatorRelativePosition and elevatorCurrentStatus for request down
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 1
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
ENDSEQUENCE


SEQUENCE setIndex
    READ the scores obtained in SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor AND SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    for each elevator, add the respective obtained scores in these 2 sequences
    SET the result as "index value"
ENDSEQUENCE


SEQUENCE chooseElevatorToCall
    READ the "index value" number
    SELECT elevator with the highest "index value" number
    IF some "index value" number are equals THEN
    SELECT elevator with the minimum load weight 
    END IF
ENDSEQUENCE


SEQUENCE moveDown
    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor  =  userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveUp
    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor = userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveDownToRequestedFloor
    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor value  =  userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveUpToRequestedFloor
    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor value  =  userRequestedFloor   THEN
    stop
ENDSEQUENCE



SEQUENCE openCloseDoors
    open elevator doors
    elevator doors stay open
    READ time
    CALL SEQUENCE StayOpen7s
    close elevator A doors
    IF doors path is blocked
    REPEAT
        open elevator  doors
        READ time
        CALL SEQUENCE StayOpen3s
        close elevator doors
    UNTIL doors path is not blocked
    END IF   
ENDSEQUENCE


SEQUENCE closeDoors when pressing floor request button
    READ time
    ABORT SEQUENCE StayOpen7s
    CALL SEQUENCE StayOpen3s
    close elevator doors
    UNTIL doors path is not blocked
    END IF   
ENDSEQUENCE



SEQUENCE StayOpen7s
    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 7s
ENDSEQUENCE


SEQUENCE StayOpen3s
    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 3s
ENDSEQUENCE
