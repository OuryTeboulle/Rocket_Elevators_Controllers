


variables:

userCallFloor
userRequestedFloor
elevatorCurrentFloor
elevatorRelativePosition = elevatorCurrentFloor (value) - userCallFloor (value)
distance between elevatorCurrentFloor and userCallFloor = |userCallFloor (value) - elevatorCurrentFloor (value)| // 'absolute value, can be only >= 0 '
elevatorCurrentStatus = idle || moveUp || moveDown
elevatorLoadWeight


SEQUENCE (manage requests)  // 'manage request according to elevatorCurrentStatus'

IF the elevatorCurrentStatus of the requested elevator = idle THEN
DO the requested SEQUENCE

IF the elevatorCurrentStatus of the requested elevator = moveUp || moveDown THEN
ADD the requested SEQUENCE on a list 

SEQUENCE (send request) // 'sending request to an elevator'




SEQUENCE (call up)  // 'when pressing call up button'

    CALL SEQUENCE (get data)

    CALL SEQUENCE (set score according to distance between elevatorCurrentFloor and userCallFloor)

    CALL SEQUENCE (set score according to elevatorRelativePosition and elevator current position for request up)

    CALL SEQUENCE (set index)

    CALL SEQUENCE (chooseElevatorToCall)

    IF choosen elevatorRelativePosition value < 0 THEN
        CALL SEQUENCE (moveUp)
        CALL SEQUENCE (openCloseDoors)
    END IF
    IF choosen elevatorRelativePosition value = 0 THEN
        CALL SEQUENCE (openCloseDoors)
    END IF
    IF choosen elevatorRelativePosition value > 0 THEN
        CALL SEQUENCE (moveDown)
        CALL SEQUENCE (openCloseDoors)
    END IF

END SEQUENCE



SEQUENCE (call down) // 'when pressing call down button'

    CALL SEQUENCE (get data)

    CALL SEQUENCE (set score according to distance between elevatorCurrentFloor and userCallFloor)

    CALL SEQUENCE (set score according to elevatorRelativePosition and elevator current position for request down)

    CALL SEQUENCE (set index)

    CALL SEQUENCE (chooseElevatorToCall)

    IF choosen elevatorRelativePosition value < 0 THEN
        CALL SEQUENCE (moveUp)
        CALL SEQUENCE (openCloseDoors)
    END IF
    IF choosen elevatorRelativePosition value = 0 THEN
        CALL SEQUENCE (openCloseDoors)
    END IF
    IF choosen elevatorRelativePosition value > 0 THEN
        CALL SEQUENCE (moveDown)
        CALL SEQUENCE (openCloseDoors)
    END IF

END SEQUENCE


SEQUENCE (pushFloorRequestButton) // 'when pressing floor request button in elevator cage'

    READ the time 
    READ the floor requested (value)
    CALL SEQUENCE (closeDoors when pressing floor request button)

    IF floor requested (value) > elevatorCurrentFloor THEN
    CALL SEQUENCE (moveUp to requested floor)
    CALL SEQUENCE (openCloseDoors)

    IF floor requested (value) < elevatorCurrentFloor THEN
    CALL SEQUENCE (moveDown to requested floor)
    CALL SEQUENCE (openCloseDoors)

    IF floor requested (value) = elevatorCurrentFloor THEN
    DO NOTHING

END SEQUENCE


SEQUENCE (get data)

    READ userCallFloor (value)
    READ all elevatorCurrentFloor (value)
    READ all the elevatorCurrentStatus
    READ all the elevatorLoadWeight (value)
    READ all the elevators |UsersCallFloor - ElevatorCurrentFloor| 
    
    CALCULATE elevatorRelativePosition FOR ALL elevators
    READ elevatorRelativePosition FOR ALL elevators
    CALCULATE distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
    READ distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
    

END SEQUENCE



SEQUENCE (set score according to distance between elevatorCurrentFloor and userCallFloor)

    SORT elevators values of distance between elevatorCurrentFloor and userCallFloor by decreasing value
    SET score with integer number from 1 to the elevators according to the sorting

END SEQUENCE



SEQUENCE (set score according to elevatorRelativePosition and elevatorCurrentStatus for request up)

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 2
    END IF

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 0
    END IF

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 1
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF

END SEQUENCE


SEQUENCE (set score according to elevatorRelativePosition and elevatorCurrentStatus for request down)

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 1
    END IF

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF

    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF

    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF

END SEQUENCE


SEQUENCE (set index)

    READ the scores obtained in SEQUENCE (set score according to distance between elevatorCurrentFloor and userCallFloor) AND SEQUENCE (set score according to elevatorRelativePosition and elevator current position for request up)
    for each elevator, add the respective obtained scores in these 2 sequences
    SET the result as "index value"

END SEQUENCE


SEQUENCE (chooseElevatorToCall)

    READ the "index value" number
    SELECT elevator with the highest "index value" number

    IF some "index value" number are equals THEN
    SELECT elevator with the minimum load weight 
    END IF

END SEQUENCE


SEQUENCE (moveDown)

    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor (value ) =  userRequestedFloor (value) THEN
    stop

END SEQUENCE


SEQUENCE (moveUp)

    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor (value ) =  userRequestedFloor (value)  THEN
    stop

END SEQUENCE


SEQUENCE (moveDown to requested floor)

    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor (value ) =  userRequestedFloor (value) THEN
    stop

END SEQUENCE


SEQUENCE (moveUp to requested floor)

    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor (value ) =  userRequestedFloor (value)  THEN
    stop

END SEQUENCE



SEQUENCE (openCloseDoors)

    open elevator doors
    elevator doors stay open
    READ time
    CALL SEQUENCE (StayOpen7s)
    close elevator A doors
    IF doors path is blocked
    REPEAT
        open elevator  doors
        READ time
        CALL SEQUENCE (StayOpen3s)
        close elevator doors
    UNTIL doors path is not blocked
    END IF   

END SEQUENCE

SEQUENCE (closeDoors when pressing floor request button)

    READ time
    ABORT SEQUENCE (StayOpen7s)
    CALL SEQUENCE (StayOpen3s)
    close elevator doors
    UNTIL doors path is not blocked
    END IF   

END SEQUENCE



SEQUENCE (StayOpen7s)

    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 7s

END SEQUENCE


SEQUENCE (StayOpen3s)

    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 3s

END SEQUENCE
