


variables:

user call floor
elevator current floor
elevator relative position = elevator current floor (value) - user call floor (value)
distance between elevator current floor and user call floor = |user call floor (value) - elevator current floor (value)| //'absolute value, can be only positive number '
elevator current status = idle || move up || move down
elevator load weight


                        '_____________________________________________________________________________________________
                                                                'MODERN METHOD                                         
                        '_____________________________________________________________________________________________


SEQUENCE callElevatorFromGroundFloor // 'when pressing call up button'

    READ the floor requested by user on the battery

    IF -6 < floor requested < -1 THEN
    SELECT column A
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall

    IF 1 < floor requested < 20 THEN
    SELECT column B
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall

    IF 21 < floor requested < 40 THEN
    SELECT column C
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall

    IF 41 < floor requested < 60 THEN
    SELECT column D
    CALL SEQUENCE getData
    CALL SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    CALL SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    CALL SEQUENCE setIndex
    CALL SEQUENCE chooseElevatorToCall

     IF choosen elevatorRelativePosition  < 0 THEN
        CALL SEQUENCE moveUp
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition  = 0 THEN
        CALL SEQUENCE openCloseDoors
    END IF
    IF choosen elevatorRelativePosition  > 0 THEN
        CALL SEQUENCE moveDown
        CALL SEQUENCE openCloseDoors
    END IF
ENDSEQUENCE


SEQUENCE getData
    READ userCallFloor 
    READ ALL elevatorCurrentFloor 
    READ ALL elevatorCurrentStatus
    READ ALL elevatorLoadWeight 
    READ ALL elevators |UsersCallFloor - ElevatorCurrentFloor| 
    CALCULATE elevatorRelativePosition FOR ALL elevators
    READ elevatorRelativePosition FOR ALL elevators
    CALCULATE distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
    READ distance between elevatorCurrentFloor and userCallFloor FOR ALL elevators
ENDSEQUENCE


SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor
    SORT elevators values of distance between elevatorCurrentFloor and userCallFloor by decreasing value
    SET score with integer number from 1 to the elevators according to the sorting
ENDSEQUENCE


SEQUENCE setScoreAccording to elevatorRelativePosition and elevatorCurrentStatus for request up
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 2
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 0
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 1
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
ENDSEQUENCE


SEQUENCE setScoreAccording to elevatorRelativePosition and elevatorCurrentStatus for request down
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 1
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF
    IF elevatorRelativePosition < 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveUp THEN
    SET score 0
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = moveDown THEN
    SET score 2
    END IF
    IF elevatorRelativePosition > 0 AND elevatorCurrentStatus = IDLE THEN
    SET score 3
    END IF
ENDSEQUENCE


SEQUENCE setIndex
    READ the scores obtained in SEQUENCE SetScoreAccordingToDistanceBetweenElevatorCurrentFloorAndUserCallFloor AND SEQUENCE setScoreAccordingToElevatorRelativePositionAndElevatorCurrentPositionForRequestUp
    for each elevator, add the respective obtained scores in these 2 sequences
    SET the result as "index value"
ENDSEQUENCE


SEQUENCE chooseElevatorToCall
    READ the "index value" number
    SELECT elevator with the highest "index value" number
    IF some "index value" number are equals THEN
    SELECT elevator with the minimum load weight 
    END IF
ENDSEQUENCE


SEQUENCE moveDown
    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor  =  userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveUp
    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor = userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveDownToRequestedFloor
    REPEAT 
        Elevator go down into column
    UNTIL elevatorCurrentFloor value  =  userRequestedFloor  THEN
    stop
ENDSEQUENCE


SEQUENCE moveUpToRequestedFloor
    REPEAT 
        Elevator go up into column
    UNTIL elevatorCurrentFloor value  =  userRequestedFloor   THEN
    stop
ENDSEQUENCE



SEQUENCE openCloseDoors
    open elevator doors
    elevator doors stay open
    READ time
    CALL SEQUENCE StayOpen7s
    close elevator A doors
    IF doors path is blocked
    REPEAT
        open elevator  doors
        READ time
        CALL SEQUENCE StayOpen3s
        close elevator doors
    UNTIL doors path is not blocked
    END IF   
ENDSEQUENCE


SEQUENCE closeDoors when pressing floor request button
    READ time
    ABORT SEQUENCE StayOpen7s
    CALL SEQUENCE StayOpen3s
    close elevator doors
    UNTIL doors path is not blocked
    END IF   
ENDSEQUENCE



SEQUENCE StayOpen7s
    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 7s
ENDSEQUENCE


SEQUENCE StayOpen3s
    REPEAT  
        elevator doors stay open
    UNTIL time = time  + 3s
ENDSEQUENCE
